package com.cnlive.mz.commons.net;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.RequestEntity;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.log4j.Logger;

/**
 * http 请求类，用于请求各类接口
 * 
 * @author java_developer
 * 
 */
public class HttpReq {
	public static void main(String[] args) {
		//String ids
		//String  ids="1163671,1163476,1163387,1162349,1161960,1161959,1161958,1161957,1161956,1161955,1161952,1161953,1161951,1161950,1161949,1161904,1161903,1161902,1161901,1161900,1161899,1161898,1161897,1161896,1161894,1161893,1161892,1161846,1161688,1161354,1161954,1164444,1164443,1164442,1164441,1164440,1164439,1164378,1164377,1164376,1164374,1164375,1164262,1164261,1164260,1164258,1164259,1164257,1164256,1164255,1164253,1164252,1164251,1164249,1164250,1157426,1157425,1157424,1157422,1157423,1157421,1156763,1156762,1156761,1156760,1156759,1156758,1156757,1156756,1156724,1156573,1156559,1156547,1156546,1156126,1153271,1153270,1153269,1153268,1153267,1153266,1153265,1153264,1152730,1152009,1152008,1152007,1152006,1152005,1152004,1151964,1151962,1151961,1151526,1164028,1164027,1149156,1149155,1149154,1149153,1149151,1149152,1148992,1148991,1148846,1148820,1144074,1143909,1143894,1143895,1143892,1143893,1143891,1143878,1143817,1143804,1143462,1143339,1165211,1148608,1134235,1134234,1134233,1134223,1134222,1134219,1134218,1134216,1134217,1134100,1134071,1134069,1135331,1135332,1135333,1135420,1135422,1135425,1135426,1135427,1135428,328795,328802,328816,328879,328959,328994,329046,1169065,1169044,1167233,420477,421171,429497,439555,447424,1060601,1060602,1205255,1161908,1161895,1161774,1158693,1157722,1156781,1156764,1152026,1149299,1149236,1146016,1145553,1134470,1134267,1135414,1135415,1135416,1135417,1135463,1135470,1157524,1157450,1151963,1148640,1133864,1134215,1134214,1134212,1134213,1134211,1134210,1134209,1134208,1134207,1134206,1134205,1134203,1134202,1134201,1134200,1133901,1133892,1134122,1134121,1134120,1134118,1134119,1134116,1134115,1134114,1134112,1134113,1134002,1133991,1133842";
		//String url = "http://mz.cnlive.com/dow";
		//String urla = HttpReq.postRequestWidthResult(url, new NameValuePair[] { new NameValuePair("ids", ids) });
		//System.out.println(urla);
		String url1 = "https://mobile.cnlive.com/CnliveMobile/hd/applyChatRoomId.action?mediaId=1=&title=聊天&sid=11111";
		String urlaa = HttpReq.getRequestWidthResult(url1);
		System.out.println(urlaa);
	}

	private static  Logger log = Logger.getLogger("httpreq");
	private static void xLog(String... str) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < str.length; i++) {
			sb.append(str[i]);
			sb.append("|");
		}
		log.info(sb.toString());
	}
	private static int TIMEOUT = 22000;

	public static boolean downloadFile(String url, File file) {
		HttpClient client = new HttpClient();
		client.getHttpConnectionManager().getParams().setConnectionTimeout(22000);
		client.getHttpConnectionManager().getParams().setSoTimeout(30000);
		GetMethod httpGet = new GetMethod(url);
		boolean flag = false;
		try {
			int code = client.executeMethod(httpGet);
			if (code == 404 || code == 500) {
				System.out.println("404_" + url);
			} else {
				InputStream in = httpGet.getResponseBodyAsStream();
				FileOutputStream out = new FileOutputStream(file);
				byte[] b = new byte[1024];
				int len = 0;
				while ((len = in.read(b)) != -1) {
					out.write(b, 0, len);
				}
				in.close();
				out.close();
				flag = true;
			}
		} catch (HttpException e) {
			e.printStackTrace();
			xLog(url,e.getMessage());
		} catch (IOException e) {
			e.printStackTrace();
			xLog(url,e.getMessage());
		} finally {
			httpGet.releaseConnection();
		}
		return flag;
	}
	
	
	public static String getRequestWidthResult(String url) {
		String response = "";
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		GetMethod get = new GetMethod(url);
		try {
			int code = httpClient.executeMethod(get);
			response = get.getResponseBodyAsString();
			return response;
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
			return "";
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
			return "";
		}
	}

	public static int getRequest(String url) {
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		GetMethod get = new GetMethod(url);
		try {
			int code = httpClient.executeMethod(get);
			return code;
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
			return 500;
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
			return 500;
		}
	}

	public static int postRequest(String url, NameValuePair[] param) {
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		PostMethod method = new PostMethod(url);
		method.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=gbk");
		// NameValuePair[] param = { new NameValuePair("age", "11"), new
		// NameValuePair("name", "jay"), };
		method.setRequestBody(param);
		int statusCode = 0;
		try {
			statusCode = httpClient.executeMethod(method);
			method.releaseConnection();
			return statusCode;
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
			return 500;
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
			return 500;
		}
	}

	public static String postRequestWidthResult(String url, NameValuePair[] param) {
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		PostMethod method = new PostMethod(url);
		method.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");
		method.setRequestBody(param);
		String response = "-1";
		try {
			int statusCode = httpClient.executeMethod(method);
			System.out.println("statusCode:"+statusCode);
			response = method.getResponseBodyAsString();
			method.releaseConnection();
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		}
		return response;
	}

	public static String postRequestWidthResult(String url, String paramName, String json) {
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		PostMethod method = new PostMethod(url);
		NameValuePair[] param = { new NameValuePair(paramName, json) };
		method.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");
		method.setRequestBody(param);
		String response = "-1";
		try {
			int statusCode = httpClient.executeMethod(method);
			response = method.getResponseBodyAsString();
			System.out.println("执行结果：" + response);
			method.releaseConnection();
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		}
		return response;
	}

	public static String postJsonWidthResult(String url, String jsonObj) {
		String resStr = null;
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		PostMethod postMethod = new PostMethod(url);
		postMethod.addRequestHeader("Content-Type", "application/json");
		postMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");
		postMethod.setRequestBody(jsonObj);
		try {
			int statusCode = httpClient.executeMethod(postMethod);
			if (statusCode != HttpStatus.SC_OK) {
				// post和put不能自动处理转发 301：永久重定向，告诉客户端以后应从新地址访问 302：Moved
				if (statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY) {
					Header locationHeader = postMethod.getResponseHeader("location");
					String location = null;
					if (locationHeader != null) {
						location = locationHeader.getValue();
						System.out.println("执行结果：The page was redirected to :" + location);
					} else {
						System.out.println("执行结果：Location field value is null");
					}
				} else {
					System.out.println("执行结果：Method failed: " + postMethod.getStatusLine());
				}
				return resStr;
			}
			byte[] responseBody = postMethod.getResponseBody();
			resStr = new String(responseBody, "UTF-8");
		} catch (Exception e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		} finally {
			postMethod.releaseConnection();
		}
		return resStr;
	}

	public static String urlPostMethod(String url, String params) {
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		PostMethod method = new PostMethod(url);
		try {
			if (params != null && !params.trim().equals("")) {
				RequestEntity requestEntity = new StringRequestEntity(params, "application/json", "UTF-8");
				method.setRequestEntity(requestEntity);
			}
			method.releaseConnection();
			httpClient.executeMethod(method);
			String responses = method.getResponseBodyAsString();
			System.out.println(responses);
			return responses;
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		}
		return null;
	}

	// get http status with authentication
	public static Object[] getStatusAndResponseWithAuth(String host, int port, String realm, String username,
			String password, String url) {
		HttpClient httpClient = new HttpClient();
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT);
		Object[] rs = new Object[2];
		httpClient.getState().setCredentials(new AuthScope(host, port, realm),
				new UsernamePasswordCredentials(username, password));
		GetMethod get = new GetMethod(url);
		get.setDoAuthentication(true);
		try {
			int status = httpClient.executeMethod(get);
			rs[0] = status;
			rs[1] = get.getResponseBodyAsString();
			return rs;
		} catch (HttpException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			xLog(url,e.getMessage());
			e.printStackTrace();
		} finally {
			get.releaseConnection();
		}
		return null;
	}

}